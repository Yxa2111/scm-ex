#lang racket

(define (require predicate)
  (if (not predicate)
      (amb)))
(define (an-element-of lst)
  (require (not (null? lst)))
  (amb (car lst) (an-element-of (cdr lst))))

(let ((k (amb 1 2 3 4 5))
      (a (amb 1 2 3 4 5))
      (j (amb 1 2 3 4 5))
      (m (amb 1 2 3 4 5))
      (b (amb 1 2 3 4 5))
      (xor (lambda (a b) (or (and a (not b)) (and b (not a))))))
  (define (distinct lst)
    (cond ((or (null? lst) (null? (cdr lst))) true)
          ((member (car lst) (cdr lst)) false)
          (else (distinct (cdr lst)))))
  (require (xor (= k 2) (= b 3)))
  (require (xor (= a 1) (= j 2)))
  (require (xor (= j 3) (= a 5)))
  (require (xor (= k 2) (= m 4)))
  (require (xor (= m 4) (= b 1)))
  (require (distinct (list k a j m b)))
  (display (list k a j m b)))