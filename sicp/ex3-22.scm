#lang planet neil/sicp

(define (make-queue)
  (let* ((front-ptr (cons 'empty-item '()))
         (rear-ptr front-ptr))
    (define (empty-queue?) (eq? front-ptr rear-ptr))
    (define (insert-queue! item)
      (let ((new-elem (list item)))
        (begin (set-cdr! rear-ptr new-elem)
               (set! rear-ptr new-elem)
               dispatch)))
    (define (delete-queue!)
      (if (empty-queue?)
          'queue-empty
          (let ((deleted-item (cadr front-ptr)))
            (begin (set! front-ptr (cdr front-ptr))
                   (set-car! front-ptr 'empty-item)
                   deleted-item))))
    (define (front-item) (car front-ptr))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'front-item) front-item)
            (else 'invaild-message)))
  dispatch))

(define (empty-queue? q) ((q 'empty-queue?)))
(define (insert-queue! q item) ((q 'insert-queue!) item))
(define (delete-queue! q) ((q 'delete-queue!)))
(define (front-item q) ((q 'front-item)))

(define q1 (make-queue))
(define (insert i end)
   (if (>= i end)
       '()
       (begin
        (insert-queue! q1 i)
        (insert (+ i 2) end))))
(define (delete)
  (if (empty-queue? q1)
      '()
      (begin
        (display (delete-queue! q1))
        (newline)
        (delete))))

(insert 1 20)
(delete)
(insert 4 56)
(delete)
